/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import {
  boolean,
  foreignKey,
  index,
  integer,
  jsonb,
  numeric,
  pgEnum,
  pgTable,
  serial,
  timestamp,
  uniqueIndex,
  varchar,
} from "@payloadcms/db-postgres/drizzle/pg-core";
import { relations, sql } from "@payloadcms/db-postgres/drizzle";
export const enum_users_role = pgEnum("enum_users_role", ["admin", "couple"]);

export const users = pgTable(
  "users",
  {
    id: serial("id").primaryKey(),
    role: enum_users_role("role").notNull().default("couple"),
    name: varchar("name").notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    enableAPIKey: boolean("enable_a_p_i_key"),
    apiKey: varchar("api_key"),
    apiKeyIndex: varchar("api_key_index"),
    email: varchar("email").notNull(),
    resetPasswordToken: varchar("reset_password_token"),
    resetPasswordExpiration: timestamp("reset_password_expiration", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar("salt"),
    hash: varchar("hash"),
    loginAttempts: numeric("login_attempts").default("0"),
    lockUntil: timestamp("lock_until", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
  },
  (columns) => ({
    users_updated_at_idx: index("users_updated_at_idx").on(columns.updatedAt),
    users_created_at_idx: index("users_created_at_idx").on(columns.createdAt),
    users_email_idx: uniqueIndex("users_email_idx").on(columns.email),
  })
);

export const gifts = pgTable(
  "gifts",
  {
    id: serial("id").primaryKey(),
    name: varchar("name").notNull(),
    description: varchar("description"),
    store: varchar("store").notNull(),
    link: varchar("link").notNull(),
    category: integer("category_id")
      .notNull()
      .references(() => categories.id, {
        onDelete: "set null",
      }),
    quantity: numeric("quantity").notNull().default("1"),
    reserved: boolean("reserved").default(false),
    partiallyReserved: boolean("partially_reserved").default(false),
    reservedQuantity: numeric("reserved_quantity").default("0"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    gifts_category_idx: index("gifts_category_idx").on(columns.category),
    gifts_updated_at_idx: index("gifts_updated_at_idx").on(columns.updatedAt),
    gifts_created_at_idx: index("gifts_created_at_idx").on(columns.createdAt),
  })
);

export const gifts_rels = pgTable(
  "gifts_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    "gift-reservationsID": integer("gift_reservations_id"),
  },
  (columns) => ({
    order: index("gifts_rels_order_idx").on(columns.order),
    parentIdx: index("gifts_rels_parent_idx").on(columns.parent),
    pathIdx: index("gifts_rels_path_idx").on(columns.path),
    gifts_rels_gift_reservations_id_idx: index(
      "gifts_rels_gift_reservations_id_idx"
    ).on(columns["gift-reservationsID"]),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [gifts.id],
      name: "gifts_rels_parent_fk",
    }).onDelete("cascade"),
    "gift-reservationsIdFk": foreignKey({
      columns: [columns["gift-reservationsID"]],
      foreignColumns: [gift_reservations.id],
      name: "gifts_rels_gift_reservations_fk",
    }).onDelete("cascade"),
  })
);

export const categories = pgTable(
  "categories",
  {
    id: serial("id").primaryKey(),
    name: varchar("name").notNull(),
    slug: varchar("slug").notNull(),
    description: varchar("description"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    categories_slug_idx: uniqueIndex("categories_slug_idx").on(columns.slug),
    categories_updated_at_idx: index("categories_updated_at_idx").on(
      columns.updatedAt
    ),
    categories_created_at_idx: index("categories_created_at_idx").on(
      columns.createdAt
    ),
  })
);

export const gift_reservations = pgTable(
  "gift_reservations",
  {
    id: serial("id").primaryKey(),
    gift: integer("gift_id")
      .notNull()
      .references(() => gifts.id, {
        onDelete: "set null",
      }),
    quantity: numeric("quantity").notNull().default("1"),
    anonymous: boolean("anonymous").default(true),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    gift_reservations_gift_idx: index("gift_reservations_gift_idx").on(
      columns.gift
    ),
    gift_reservations_updated_at_idx: index(
      "gift_reservations_updated_at_idx"
    ).on(columns.updatedAt),
    gift_reservations_created_at_idx: index(
      "gift_reservations_created_at_idx"
    ).on(columns.createdAt),
  })
);

export const payload_locked_documents = pgTable(
  "payload_locked_documents",
  {
    id: serial("id").primaryKey(),
    globalSlug: varchar("global_slug"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index(
      "payload_locked_documents_global_slug_idx"
    ).on(columns.globalSlug),
    payload_locked_documents_updated_at_idx: index(
      "payload_locked_documents_updated_at_idx"
    ).on(columns.updatedAt),
    payload_locked_documents_created_at_idx: index(
      "payload_locked_documents_created_at_idx"
    ).on(columns.createdAt),
  })
);

export const payload_locked_documents_rels = pgTable(
  "payload_locked_documents_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: integer("users_id"),
    giftsID: integer("gifts_id"),
    categoriesID: integer("categories_id"),
    "gift-reservationsID": integer("gift_reservations_id"),
  },
  (columns) => ({
    order: index("payload_locked_documents_rels_order_idx").on(columns.order),
    parentIdx: index("payload_locked_documents_rels_parent_idx").on(
      columns.parent
    ),
    pathIdx: index("payload_locked_documents_rels_path_idx").on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      "payload_locked_documents_rels_users_id_idx"
    ).on(columns.usersID),
    payload_locked_documents_rels_gifts_id_idx: index(
      "payload_locked_documents_rels_gifts_id_idx"
    ).on(columns.giftsID),
    payload_locked_documents_rels_categories_id_idx: index(
      "payload_locked_documents_rels_categories_id_idx"
    ).on(columns.categoriesID),
    payload_locked_documents_rels_gift_reservations_id_idx: index(
      "payload_locked_documents_rels_gift_reservations_id_idx"
    ).on(columns["gift-reservationsID"]),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_locked_documents.id],
      name: "payload_locked_documents_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_locked_documents_rels_users_fk",
    }).onDelete("cascade"),
    giftsIdFk: foreignKey({
      columns: [columns["giftsID"]],
      foreignColumns: [gifts.id],
      name: "payload_locked_documents_rels_gifts_fk",
    }).onDelete("cascade"),
    categoriesIdFk: foreignKey({
      columns: [columns["categoriesID"]],
      foreignColumns: [categories.id],
      name: "payload_locked_documents_rels_categories_fk",
    }).onDelete("cascade"),
    "gift-reservationsIdFk": foreignKey({
      columns: [columns["gift-reservationsID"]],
      foreignColumns: [gift_reservations.id],
      name: "payload_locked_documents_rels_gift_reservations_fk",
    }).onDelete("cascade"),
  })
);

export const payload_preferences = pgTable(
  "payload_preferences",
  {
    id: serial("id").primaryKey(),
    key: varchar("key"),
    value: jsonb("value"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index("payload_preferences_key_idx").on(
      columns.key
    ),
    payload_preferences_updated_at_idx: index(
      "payload_preferences_updated_at_idx"
    ).on(columns.updatedAt),
    payload_preferences_created_at_idx: index(
      "payload_preferences_created_at_idx"
    ).on(columns.createdAt),
  })
);

export const payload_preferences_rels = pgTable(
  "payload_preferences_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: integer("users_id"),
  },
  (columns) => ({
    order: index("payload_preferences_rels_order_idx").on(columns.order),
    parentIdx: index("payload_preferences_rels_parent_idx").on(columns.parent),
    pathIdx: index("payload_preferences_rels_path_idx").on(columns.path),
    payload_preferences_rels_users_id_idx: index(
      "payload_preferences_rels_users_id_idx"
    ).on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_preferences.id],
      name: "payload_preferences_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_preferences_rels_users_fk",
    }).onDelete("cascade"),
  })
);

export const payload_migrations = pgTable(
  "payload_migrations",
  {
    id: serial("id").primaryKey(),
    name: varchar("name"),
    batch: numeric("batch"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index(
      "payload_migrations_updated_at_idx"
    ).on(columns.updatedAt),
    payload_migrations_created_at_idx: index(
      "payload_migrations_created_at_idx"
    ).on(columns.createdAt),
  })
);

export const registry_settings = pgTable("registry_settings", {
  id: serial("id").primaryKey(),
  coupleNames: varchar("couple_names").notNull(),
  weddingDate: timestamp("wedding_date", {
    mode: "string",
    withTimezone: true,
    precision: 3,
  }).notNull(),
  welcomeMessage: jsonb("welcome_message").notNull(),
  shareMessage: jsonb("share_message").notNull(),
  footerText: varchar("footer_text").notNull(),
  primaryColor: varchar("primary_color").default("#6b21a8"),
  secondaryColor: varchar("secondary_color").default("#f3e8ff"),
  updatedAt: timestamp("updated_at", {
    mode: "string",
    withTimezone: true,
    precision: 3,
  }),
  createdAt: timestamp("created_at", {
    mode: "string",
    withTimezone: true,
    precision: 3,
  }),
});

export const relations_users = relations(users, () => ({}));
export const relations_gifts_rels = relations(gifts_rels, ({ one }) => ({
  parent: one(gifts, {
    fields: [gifts_rels.parent],
    references: [gifts.id],
    relationName: "_rels",
  }),
  "gift-reservationsID": one(gift_reservations, {
    fields: [gifts_rels["gift-reservationsID"]],
    references: [gift_reservations.id],
    relationName: "gift-reservations",
  }),
}));
export const relations_gifts = relations(gifts, ({ one, many }) => ({
  category: one(categories, {
    fields: [gifts.category],
    references: [categories.id],
    relationName: "category",
  }),
  _rels: many(gifts_rels, {
    relationName: "_rels",
  }),
}));
export const relations_categories = relations(categories, () => ({}));
export const relations_gift_reservations = relations(
  gift_reservations,
  ({ one }) => ({
    gift: one(gifts, {
      fields: [gift_reservations.gift],
      references: [gifts.id],
      relationName: "gift",
    }),
  })
);
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
    giftsID: one(gifts, {
      fields: [payload_locked_documents_rels.giftsID],
      references: [gifts.id],
      relationName: "gifts",
    }),
    categoriesID: one(categories, {
      fields: [payload_locked_documents_rels.categoriesID],
      references: [categories.id],
      relationName: "categories",
    }),
    "gift-reservationsID": one(gift_reservations, {
      fields: [payload_locked_documents_rels["gift-reservationsID"]],
      references: [gift_reservations.id],
      relationName: "gift-reservations",
    }),
  })
);
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: "_rels",
    }),
  })
);
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
  })
);
export const relations_payload_preferences = relations(
  payload_preferences,
  ({ many }) => ({
    _rels: many(payload_preferences_rels, {
      relationName: "_rels",
    }),
  })
);
export const relations_payload_migrations = relations(
  payload_migrations,
  () => ({})
);
export const relations_registry_settings = relations(
  registry_settings,
  () => ({})
);

type DatabaseSchema = {
  enum_users_role: typeof enum_users_role;
  users: typeof users;
  gifts: typeof gifts;
  gifts_rels: typeof gifts_rels;
  categories: typeof categories;
  gift_reservations: typeof gift_reservations;
  payload_locked_documents: typeof payload_locked_documents;
  payload_locked_documents_rels: typeof payload_locked_documents_rels;
  payload_preferences: typeof payload_preferences;
  payload_preferences_rels: typeof payload_preferences_rels;
  payload_migrations: typeof payload_migrations;
  registry_settings: typeof registry_settings;
  relations_users: typeof relations_users;
  relations_gifts_rels: typeof relations_gifts_rels;
  relations_gifts: typeof relations_gifts;
  relations_categories: typeof relations_categories;
  relations_gift_reservations: typeof relations_gift_reservations;
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels;
  relations_payload_locked_documents: typeof relations_payload_locked_documents;
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels;
  relations_payload_preferences: typeof relations_payload_preferences;
  relations_payload_migrations: typeof relations_payload_migrations;
  relations_registry_settings: typeof relations_registry_settings;
};

declare module "@payloadcms/db-postgres/types" {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema;
  }
}
